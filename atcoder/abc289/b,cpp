/**
 *    author:  tourist
 *    created: 04.12.2022 15:08:24       
**/
#include <bits/stdc++.h>
    
using namespace std;
    
#ifdef LOCAL
#include "algo/debug.h"
#else
#define debug(...) 42
#endif
    
template <typename T>
T inverse(T a, T m) {
    T u = 0, v = 1;
    while (a != 0) {
    T t = m / a;
    m -= t * a; swap(a, m);
    u -= t * v; swap(u, v);
    }
    assert(m == 1);
    return u;
}
    
template <typename T>
class Modular {
    public:
    using Type = typename decay<decltype(T::value)>::type;
    
    constexpr Modular() : value() {}
    template <typename U>
    Modular(const U& x) {
    value = normalize(x);
    }
    
    template <typename U>
    static Type normalize(const U& x) {
    Type v;
    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);
    else v = static_cast<Type>(x % mod());
    if (v < 0) v += mod();
    return v;
    }
    
    const Type& operator()() const { return value; }
    template <typename U>
    explicit operator U() const { return static_cast<U>(value); }
    constexpr static Type mod() { return T::value; }
    
    Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }
    Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }
    template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }
    template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }
    Modular& operator++() { return *this += 1; }
    Modular& operator--() { return *this -= 1; }
    Modular operator++(int) { Modular result(*this); *this += 1; return result; }
    Modular operator--(int) { Modular result(*this); *this -= 1; return result; }
    Modular operator-() const { return Modular(-value); }
    
    template <typename U = T>
    typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {
#ifdef _WIN32
    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);
    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;
    asm(
        "divl %4; \n\t"
        : "=a" (d), "=d" (m)
        : "d" (xh), "a" (xl), "r" (mod())
    );
    value = m;
#else
    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));
#endif
    return *this;
    }
    template <typename U = T>
    typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {
    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());
    value = normalize(value * rhs.value - q * mod());
    return *this;
    }
    template <typename U = T>
    typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {
    value = normalize(value * rhs.value);
    return *this;
    }
    
    Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }
    
    friend const Type& abs(const Modular& x) { return x.value; }
    
    template <typename U>
    friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);
    
    template <typename U>
    friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);
    
    template <typename V, typename U>
    friend V& operator>>(V& stream, Modular<U>& number);
    
    private:
    Type value;
};
    
template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }
template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }
template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }
    
template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
    
template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }
    
template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
    
template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
    
template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
    
template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
    
template<typename T, typename U>
Modular<T> power(const Modular<T>& a, const U& b) {
    assert(b >= 0);
    Modular<T> x = a, res = 1;
    U p = b;
    while (p > 0) {
    if (p & 1) res *= x;
    x *= x;
    p >>= 1;
    }
    return res;
}
    
template <typename T>
bool IsZero(const Modular<T>& number) {
    return number() == 0;
}
    
template <typename T>
string to_string(const Modular<T>& number) {
    return to_string(number());
}
    
// U == std::ostream? but done this way because of fastoutput
template <typename U, typename T>
U& operator<<(U& stream, const Modular<T>& number) {
    return stream << number();
}
    
// U == std::istream? but done this way because of fastinput
template <typename U, typename T>
U& operator>>(U& stream, Modular<T>& number) {
    typename common_type<typename Modular<T>::Type, long long>::type x;
    stream >> x;
    number.value = Modular<T>::normalize(x);
    return stream;
}
    
/*
using ModType = int;
    
struct VarMod { static ModType value; };
ModType VarMod::value;
ModType& md = VarMod::value;
using Mint = Modular<VarMod>;
*/
    
constexpr int md = (int) 1e9 + 7;
using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;
    
/*vector<Mint> fact(1, 1);
vector<Mint> inv_fact(1, 1);
    
Mint C(int n, int k) {
    if (k < 0 || k > n) {
    return 0;
    }
    while ((int) fact.size() < n + 1) {
    fact.push_back(fact.back() * (int) fact.size());
    inv_fact.push_back(1 / fact.back());
    }
    return fact[n] * inv_fact[k] * inv_fact[n - k];
}*/
    
class dsu {
    public:
    vector<int> p;
    int n;
    
    dsu(int _n) : n(_n) {
    p.resize(n);
    iota(p.begin(), p.end(), 0);
    }
    
    inline int get(int x) {
    return (x == p[x] ? x : (p[x] = get(p[x])));
    }
    
    inline bool unite(int x, int y) {
    x = get(x);
    y = get(y);
    if (x != y) {
        p[x] = y;
        return true;
    }
    return false;
    }
};
    
Mint Solve(int n, vector<pair<int, int>> p) {
    vector<vector<int>> pos(n, vector<int>(n));
    for (int i = 0; i < n * (n - 1) / 2; i++) {
    pos[p[i].first][p[i].second] = pos[p[i].second][p[i].first] = i;
    }
    vector<vector<int>> g(n);
    int id = n;
    {
    dsu d(2 * n - 1);
    for (int it = n * (n - 1) / 2 - 1; it >= 0; it--) {
        int x = p[it].first;
        int y = p[it].second;
        int xx = d.get(x);
        int yy = d.get(y);
        if (xx != yy) {
        d.unite(xx, id);
        d.unite(yy, id);
        g.push_back({xx, yy});
        id += 1;
        }
    }
    }
    assert((int) g.size() == 2 * n - 1);
    int root = 2 * n - 2;
    vector<int> depth(2 * n - 1);
    vector<int> tin(2 * n - 1);
    vector<int> tout(2 * n - 1);
    vector<int> pv(2 * n - 1);
    int T = 0;
    function<void(int)> Dfs = [&](int v) {
    tin[v] = ++T;
    for (int u : g[v]) {
        depth[u] = depth[v] + 1;
        pv[u] = v;
        Dfs(u);
    }
    tout[v] = ++T;
    };
    Dfs(root);
    vector<vector<int>> lca(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
        int x = i;
        int y = j;
        while (depth[x] > depth[y]) {
        x = pv[x];
        }
        while (depth[y] > depth[x]) {
        y = pv[y];
        }
        while (x != y) {
        x = pv[x];
        y = pv[y];
        }
        lca[i][j] = lca[j][i] = x;
    }
    }
    dsu d(4 * n - 2);
    int cnt = n - 1;
//  debug(g);
    auto Forbid = [&](int x, int y, int v) {
//    debug("forbid", x, y, v);
    if (d.unite(x, y + v * (2 * n - 1))) {
        cnt -= 1;
    }
    d.unite(x + (2 * n - 1), y + (1 - v) * (2 * n - 1));
    };
    for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
        for (int k = j + 1; k < n; k++) {
        array<int, 3> p = {i, j, k};
        array<int, 3> old = p;
        sort(p.begin(), p.end(), [&](int x, int y) {
            return tin[x] < tin[y];
        });
        i = p[0];
        j = p[1];
        k = p[2];
//        debug(i, j, k, lca[i][j], lca[j][k], depth, g);
        if (pos[i][j] > pos[i][k] && pos[i][j] > pos[j][k]) {
            if (depth[lca[i][j]] > depth[lca[j][k]]) {
            // pass
            } else {
            Forbid(lca[i][j], lca[j][k], 0);
            }
        }
        if (pos[i][k] > pos[i][j] && pos[i][k] > pos[j][k]) {
            Forbid(lca[i][j], lca[j][k], 1);
        }
        if (pos[j][k] > pos[i][j] && pos[j][k] > pos[i][k]) {
            if (depth[lca[i][j]] > depth[lca[j][k]]) {
            Forbid(lca[i][j], lca[j][k], 0);
            } else {
            // pass
            }
        }
        i = old[0];
        j = old[1];
        k = old[2];
        }
    }
    }
    for (int i = 0; i < 2 * n - 1; i++) {
    if (d.get(i) == d.get(i + (2 * n - 1))) {
        return 0;
    }
    }
    return power(Mint(2), cnt);
}
    
int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    vector<pair<int, int>> p(n * (n - 1) / 2);
    for (int i = 0; i < (int) p.size(); i++) {
    cin >> p[i].first >> p[i].second;
    --p[i].first; --p[i].second;
    }
    cout << Solve(n, p) << '\n';
    return 0;
}